#!/usr/bin/env node
/* eslint-disable node/shebang */
/**
 * @file        download        Program to create dcpConfig variable based on dcp-client::init()
 *                              semantics, and dump the serialized version of it over fd 3.
 *
 * @author      Wes Garland, wes@kingsds.netework
 * @date        Aug 2020
 */
const fs = require('fs');

const dcpClient = require('..');
const { Address } = require('dcp/wallet');
const serializer = require('dcp/serialize');

// To be able to serialize dcpConfig identities
serializer.userCtors.dcpEth$$Address = Address;
const { serializeAsync, deserialize } = serializer;

let outputFd = +(process.env.BUILD_DCP_CONFIG_OUTPUT_FD || "3");

async function main() {
  var input, initArgv, programName;
  
  dcpClient._initHead();

  if (!process.stdin.isTTY)
    input = fs.readFileSync(process.stdin.fd, 'utf-8');
  if (input && input.length > 1) {
    ({ initArgv, programName } = deserialize(input));
  } else {
    initArgv = [];
    programName = false;
  }
        
  let outputObjects = await dcpClient.createAggregateConfig(initArgv, programName);
  const output = await serializeAsync(outputObjects);
  
  try {
    fs.writeSync(outputFd, output, 'utf-8');
  } catch(e) {
    if (e.code === 'EINVAL') {
      console.warn(`Warning: fd ${outputFd} invalid; writing to stdout instead`);
      fs.writeSync(process.stdout.fd, output, 'utf-8');
    } else {
      throw e;
    }
  }
}

main()
  .catch(console.error)
  .finally(() => setImmediate(process.exit));
