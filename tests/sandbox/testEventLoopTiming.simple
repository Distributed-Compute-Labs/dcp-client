#! /usr/bin/env node
/** 
 *  @file       testEventLoopTiming.simple
 * 
 *  Test timing of the event loop using a function that contains a delay, await, then another delay.
 * 
 *  @author     Ryan Saweczko, ryansaweczko@kingsds.network
 *  @date       January 2022
 */


process.exitCode = 1;


const sandboxScripts = '../../libexec/sandbox/'

const files = [
  require.resolve(sandboxScripts + 'script-load-wrapper.js'),
  require.resolve(sandboxScripts + 'event-loop-virtualization.js')
]
const expectedOutputs = {
  'script-load-wrapper': false,
  'event-loop-virtualization': false,
  'cpuTime': false,
  'cpuTimeReason': 'Event not received.',
}

const loopDelay = 300;

function outputTests(message)
{
  if (message.value.script === 'script-load-wrapper')
    expectedOutputs['script-load-wrapper'] = true;
  if (message.value.script === 'event-loop-virtualization')
    expectedOutputs['event-loop-virtualization'] = true;

  if (message.value.request === 'totalCPUTime')
  {
    const timeTaken = message.value.CPU;
    // Give 5% buffer for allowable times - can drift a little due to timeout etc
    if (timeTaken*1.05 > loopDelay * 2 && timeTaken*.95 < loopDelay * 2)
      expectedOutputs.cpuTime = true;
    else
      expectedOutputs.cpuTimeReason = `Bad value returned for CPU time: ${timeTaken}`;
  }
  // If all of my expected outputs have been met, set the exit code to 0 since all was ok.
  if (Object.values(expectedOutputs).every((ele) =>  ele))
    process.exitCode = 0;
}


const realSetTimeout = setTimeout;
require('./globalPolyfillHelper').init(files, outputTests)


setTimeout(async () => {
  let time = Date.now();
  for (;Date.now()<time+loopDelay;){}
  await new Promise(r => setTimeout(r,1000));
  time = Date.now();
  for (;Date.now()<time+loopDelay;){}
},0)


realSetTimeout(() => emitEvent('message', { request: 'resetAndGetCPUTime' }), 2000);



// Give more information in the event the test fails.
process.on('exit', (code) => {
  if (code !== 0)
    console.error(`Test Failed. End values for expected outputs was ${JSON.stringify(expectedOutputs)}`)
});